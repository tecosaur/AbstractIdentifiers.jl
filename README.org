#+title: DigitalIdentifiersBase.jl
#+author: tecosaur

#+html: <a href="https://tecosaur.net"><img src="https://img.shields.io/badge/%F0%9F%A6%95-tec-27a560.svg"></a>
#+html: <a href="https://tecosaur.github.io/DigitalIdentifiersBase.jl/stable/"><img src="https://img.shields.io/badge/docs-stable-blue.svg"></a>
#+html: <a href="https://tecosaur.github.io/DigitalIdentifiersBase.jl/dev/"><img src="https://img.shields.io/badge/docs-dev-blue.svg"></a>
#+html: <a href="https://coveralls.io/github/tecosaur/DigitalIdentifiersBase.jl"><img src="https://coveralls.io/repos/github/tecosaur/DigitalIdentifiersBase.jl/badge.svg"></a>
#+html: <a href="https://www.tldrlegal.com/license/mozilla-public-license-2-0-mpl-2"><img src="https://img.shields.io/badge/license-MPL%202.0-teal.svg"></a>
#+html: <a href="https://liberapay.com/tec"><img src="https://shields.io/badge/support%20my%20efforts-f6c915?logo=Liberapay&logoColor=black"></a>

A tiny framework for structured and validated identifier types.

* Features

+ An abstract type for identifier implementations to subtype (~AbstractIdentifier~)
+ A consistent API for getting three forms of the identifier:
  - The canonical format
  - A short form
  - A permanent URL (PURL)
+ Dedicated error types for malformed identifiers and checksum mismatches
+ Simple (but sufficient) pretty printing

* Motivation

It's tempting to just use plain strings or integers to represent identifiers
representing digital pieces of data. Unfortunately, it's easy to end up in a
situation where the lack of structure creates an opportunity for a wide range of
problems:
+ Failing to detect malformed identifiers
+ Fragile code that relies on a single specific formatting
+ Forgetting to include the proper prefix, hyphenation, or other formatting
+ Stylistic differences making equality testing fragile
+ Annoyances when parsing/serialising the identifier
+ Undocumented (and unverified) assumptions that a particular string/number just
  happens to represent a specific kind of identifier

For all of these reasons it is worth formalising interaction with identifiers.
=DigitalIdentifiersBase= provides a simple framework for doing so that other packages
can easily implement and extend.

* Types and interface

An abstract ~AbstractIdentifier~ type is introduced (see the docstring for more
information), along with the error types ~MalformedIdentifier~ and
~ChecksumViolation~.

An ~AbstractIdentifier~ can be constructed from its canonical string
representation (or variations thereof), and can be returned to a canonical
representation by ~print~ or ~string~. It is usual for an identifier to be displayed
in the format =name:shortcode= in the REPL, with a hyperlink to the canonical page for
the resource if possible.

The underlying integer identifier can be extracted using the ~idcode~ accessor
function, and similarly the checksum (when applicable) using the ~idchecksum~
accessor function.

#+begin_src julia
parse(::Type{T<:AbstractIdentifier}, representation::String) -> T

shortcode(id::AbstractIdentifier) -> String (minimal form)
purl(id::AbstractIdentifier) -> Union{String, Nothing}

print(id::AbstractIdentifier) -> Nothing (print canonical string form)
string(id::AbstractIdentifier) -> String (canonical form)
#+end_src

Parsing is generally permissive, with the intent being to accept all unambiguous
forms. Output formatting should be strict.
